name: Deploy to ECS Fargate (Multi-tenant)

on:
  workflow_dispatch:
    inputs:
      instanceId:
        description: 'Instance ID'
        required: true
        type: string
      organizationId:
        description: 'Organization ID'
        required: true
        type: string
      portalId:
        description: 'Portal ID'
        required: true
        type: string
      userId:
        description: 'User ID'
        required: true
        type: string
      organizationName:
        description: 'Organization Name'
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: 084375570866.dkr.ecr.us-east-1.amazonaws.com/portcullis/api
  BASE_ECS_CLUSTER: development    # Base cluster name without tenant suffix
  BASE_CONTAINER_NAME: portcullis-api          # Base container name without tenant suffix

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    
    steps:
    - name: Set tenant-specific variables
      id: tenant-vars
      run: |
        # Create tenant-specific names using organizationId
        echo "::set-output name=ecs_service::portcullis-api-${{ github.event.inputs.organizationId }}"
        echo "::set-output name=task_family::portcullis-api-${{ github.event.inputs.organizationId }}"
        echo "::set-output name=container_name::portcullis-api-${{ github.event.inputs.organizationId }}"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Create new task definition
      id: task-def-template
      run: |
        cat << EOF > task-definition.json
        {
          "family": "${{ steps.tenant-vars.outputs.task_family }}",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "containerDefinitions": [
            {
              "name": "${{ steps.tenant-vars.outputs.container_name }}",
              "image": "${{ env.ECR_REPOSITORY }}:latest",
              "essential": true,
              "environment": [
                {
                  "name": "INSTANCE_ID",
                  "value": "${{ github.event.inputs.instanceId }}"
                },
                {
                  "name": "ORGANIZATION_ID",
                  "value": "${{ github.event.inputs.organizationId }}"
                },
                {
                  "name": "PORTAL_ID",
                  "value": "${{ github.event.inputs.portalId }}"
                },
                {
                  "name": "USER_ID",
                  "value": "${{ github.event.inputs.userId }}"
                },
                {
                  "name": "ORGANIZATION_NAME",
                  "value": "${{ github.event.inputs.organizationName }}"
                },
                {
                  "name": "TENANT_ID",
                  "value": "${{ github.event.inputs.organizationId }}"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/${{ steps.tenant-vars.outputs.container_name }}",
                  "awslogs-region": "${AWS_REGION}",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOF

    - name: Register task definition
      id: register-task
      run: |
        aws ecs register-task-definition --cli-input-json file://task-definition.json

    - name: Create or update ECS service
      id: deploy-service
      run: |
        # Check if service exists
        if aws ecs describe-services --cluster ${{ env.BASE_ECS_CLUSTER }} --services ${{ steps.tenant-vars.outputs.ecs_service }} | grep -q "MISSING"; then
          # Create new service if it doesn't exist
          aws ecs create-service \
            --cluster ${{ env.BASE_ECS_CLUSTER }} \
            --service-name ${{ steps.tenant-vars.outputs.ecs_service }} \
            --task-definition ${{ steps.tenant-vars.outputs.task_family }} \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-xxxxx,subnet-yyyyy],securityGroups=[sg-zzzzz]}" \
            --enable-execute-command
        else
          # Update existing service
          aws ecs update-service \
            --cluster ${{ env.BASE_ECS_CLUSTER }} \
            --service ${{ steps.tenant-vars.outputs.ecs_service }} \
            --task-definition ${{ steps.tenant-vars.outputs.task_family }} \
            --force-new-deployment
        fi

    - name: Wait for service stability
      run: |
        aws ecs wait services-stable \
          --cluster ${{ env.BASE_ECS_CLUSTER }} \
          --services ${{ steps.tenant-vars.outputs.ecs_service }}